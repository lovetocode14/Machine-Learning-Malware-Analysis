import time
import pandas as pd
import random
from time_format import convert_time_to_hours_minutes_seconds
from test_create import result_to_file


print('Started, creating dataset')
time_start = time.time()
weights = [0, 0, 0, 0, 0, 0, 0, 0, 0]
h = []
error_threshold = 5
error = 100

# loading into Pandas and formatting
df_virus_all = pd.read_csv('C:/Users/canad/Documents/dataset_analyser/virus.txt', sep=' ', header = None)
df_safe_all = pd.read_csv('C:/Users/canad/Documents/dataset_analyser/safe_files.txt', sep=' ', header = None)
columns = ['2', '3', '4', '5', '6', '7', '8', '9']
df_virus_all.columns = columns
df_safe_all.columns = columns

frames = [df_virus_all, df_safe_all]
df_testing = pd.concat(frames)


# now let's create our y column as well as add bias
y = []
# virus get 1
for i in range(len(df_virus_all.index)):
    y.append(1)
# safe get -1
for i in range(len(df_safe_all.index)):
    y.append(-1)

# inserting our bias into the 1st column of our testing data
bias = [1] * len(df_testing.index)
df_testing.insert(0, '1', bias)

# now let's create our lists for the math operations
x_testing = df_testing.values.tolist()
h = [None] * len(df_testing.index)


for i in range(len(x_testing)):
    for j in range(len(x_testing[i])):
        if isinstance(x_testing[i][j], str):
            x_testing[i][j] = int(x_testing[i][j], 16)

counter = 1

print('Done creating dataset')

wrong_entries = []
index = 0

while error > error_threshold:
    if counter == 1:
        print('-----------------------------------------------------')
        print('Run ' + str(counter))
        print('Time Elapsed: ' + convert_time_to_hours_minutes_seconds(time_start, time.time()))
        # multiply x_testing by w (weights) to get h (hypothesis set)
        for i in range(len(x_testing)):
            total = 0
            for j in range(9):
                total += x_testing[i][j] * weights[j]
            if total > 0 or total == 0:
                total = 1
            else:
                total = -1
            h[i] = total

        # note our wrong entries
        for i in range(len(h)):
            if h[i] == y[i]:
                continue
            else:
                # here we're not noting the actual wrong entry, but its index (i) to keep track of
                # where it is in the training data
                wrong_entries.append(i)
        error = (len(wrong_entries) / len(y)) * 100
        print('Error: ' + str(error))
        counter += 1

    else:
        weights_updated = weights
        h_updated = []
        h_updated = [None] * len(x_testing)

        if index < len(wrong_entries):
            index += 1
        if index == len(wrong_entries) - 1:
            for i in range(9):
                weights[i] += y[wrong_entries[index]] * x_testing[wrong_entries[index]][i]
            print('-----------------------------------------------------')
            print('Run ' + str(counter))
            print('Time Elapsed: ' + convert_time_to_hours_minutes_seconds(time_start, time.time()))
            # multiply x_testing by w (weights) to get h (hypothesis set)
            for i in range(len(x_testing)):
                total = 0
                for j in range(9):
                    total += x_testing[i][j] * weights[j]
                if total > 0 or total == 0:
                    total = 1
                else:
                    total = -1
                h[i] = total

            # note our wrong entries

            for i in range(len(h)):
                if h[i] == y[i]:
                    continue
                else:
                    # here we're not noting the actual wrong entry, but its index (i) to keep track of
                    # where it is in the training data
                    wrong_entries.append(i)
            error_updated = (len(wrong_entries_updated) / len(y)) * 100

            new_weight_error = (len(wrong_entries) / len(y)) * 100
            if new_weight_error < error:
                error = new_weight_error
                if error <= error_threshold:
                    result_to_file(time_start, weights_updated)
                else:
                    weights = weights_updated
                    print('Weights: ' + str(weights))

            print('Error: ' + str(error))
            counter += 1

        else:
            for i in range(9):
                weights_updated[i] += y[wrong_entries[index]] * x_testing[wrong_entries[index]][i]

            if index == 0:
                index += 1

            print('-----------------------------------------------------')
            print('Run ' + str(counter))
            print('Time Elapsed: ' + convert_time_to_hours_minutes_seconds(time_start, time.time()))
            # multiply x_testing by w (weights) to get h (hypothesis set)
            for i in range(len(x_testing)):
                total = 0
                for j in range(9):
                    total += x_testing[i][j] * weights_updated[j]
                if total > 0 or total == 0:
                    total = 1
                else:
                    total = -1
                h_updated[i] = total

            # note our wrong entries
            wrong_entries_updated = []
            for i in range(len(h_updated)):
                if h_updated[i] == y[i]:
                    continue
                else:
                    # here we're not noting the actual wrong entry, but its index (i) to keep track of
                    # where it is in the training data
                    wrong_entries_updated.append(i)
            error_updated = (len(wrong_entries_updated) / len(y)) * 100

            new_weight_error = (len(wrong_entries_updated) / len(y)) * 100
            if new_weight_error < error:
                error = new_weight_error
                if error <= error_threshold:
                    result_to_file(time_start, weights_updated)
                else:
                    weights = weights_updated
                    print('Weights: ' + str(weights))
                    wrong_entries = wrong_entries_updated

            print('Error: ' + str(error))
            counter += 1
